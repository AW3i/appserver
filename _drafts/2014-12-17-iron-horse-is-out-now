---
layout: post
title:  1.0.0-beta2 aka "Iron Horse" is out now
date:   2014-12-17 12:00:00
author: wagnert
version: 1.0.0beta2
categories: [release]
---

You may ask: Why *Iron Horse*? The answer is quite simple!

We chose that name, because it implicates a very important meaning. *Iron* on the one hand, what 
stands for the rock solid infrastructure solution we want to provide and *Horse* on the other. *Horse* stands 
for the hard working animal mankind can always rely on since hundreds of years.

Both are a synonym for an infrastructure solution you can build your business critical application on!

Many guys out there, we talked to during the last years, told us: It's not possible to build an infrastructure
solution completely based on PHP: Too slow, too many segfaults and too risky are only some of things we've 
heard.

As developers who love using PHP and who saw the strong need for an application server in many of our projects,
we decided to give it a try.

### What is an Application Server

The common definition of what an application server is and what it has to provide is very loose. Therefore it
is worthwile to specify the term closer. For us it will be a server that delivers web pages in most cases.
To do this, we need some kind of web server functionality like Apache or nginx has. But this is by far not
the main purpose an application server should have. Beside the functionality of acting as a web server, it
comes with the following services, we'll focus on in our next blog posts

* Servlet-Engine
* Persistence-Container
* Message-Queue
* Timer-Service

On top of these services, it provides client libraries that enables you to use those and extends them with 
functionality, that you know from some of the well known frameworks. To make it short, the application server
comes with

* Dependendcy Injection (DI)
* Aspect Oriented Programming (AOP)
* Design-by-Contract (DbC)
* Annotations

The services, the client libraries plus these functionality enables you to write fast, scalable and secure
applications.

### Why should i use an Application Server?

This is a good question and i'll try to explain the most important reasons from my point of view. Actually
there are many good PHP applications out there on their way to conquer the world, that's good and we like
that. Many of those applications are using the LAMP stack or some kind of it and they run well on it.

So if that is true, why should you use an Application Server? Let's have an look at the market PHP 
applications are very popular in. Actually we see a lot of small till midrange content management and shop 
systems, bug trackers and other useful tools. But when we look at the financial market, hightech industries
enterprise content management and shop systems, we can't find any noteable PHP applications. One reason is,
that the LAMP stack all the applications are running on is simply not ready to run enterprise applications.

Against technologies like Java, where standardized, fast, secure, scalable and certified infrastructure 
solutions are available, these are completely missing in the PHP ecosystem. It's not the language the 
frameworks or the tools that lacks for enterprise, it's more the stack the language is running on. That is,
where an application server like appserver.io will came in. appserver.io will provide exactly this and
therefor it'll close the gap between language and stack.

We know, that you'll may think why even these guys should worked that out! That's what we're also wondering
about. But looking at PHP history we think one of the main reasons is the missing support for multithreading
and in consequence of that, data can not be shared between processes. Since Joe Watkins started pthreads
this is not longer a restriction and PHP gives you the power to do that. Meanwhile you can see a growing 
number of PHP developers that give multithreading a try and helps PHP into a new level.
